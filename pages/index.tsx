import React, { useState, useEffect } from 'react';

import Head from 'next/head';
import Image from 'next/image';
import { Rubik, Roboto } from '@next/font/google';


import { Configuration, OpenAIApi } from 'openai';

import { saveAs } from 'file-saver';

// OpenAI initialization and configuration
const configuration = new Configuration({
  apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY
});

const openai = new OpenAIApi(configuration);

const rubik = Rubik({
  subsets: ['latin'],
  weight: '700',
  variable: '--font-rubik',
});

const roboto = Roboto({
  subsets: ['latin'],
  weight: '400',
  variable: '--font-roboto',
});

export default function Home() {

  const [generatedImage, setGeneratedImage] = useState(
    'https://developers.elementor.com/docs/assets/img/elementor-placeholder-image.png'
    );

  const [userText, setUserText] = useState('');
  const [loading, setLoading] = useState(false);
  const [clickEnabled, setClickEnabled] = useState(true);
  const [remainingTime, setRemainingTime] = useState(0);
  const [isValidationError, setIsValidationError] = useState(false);



  // setup a mwitu rate limiter for the generate button to prevent spamming the api with requests and getting rate limited by openai
  useEffect(() => {
    const clickLimitter = setTimeout(() => {
      setClickEnabled(true);
      setRemainingTime(0);
    }, 20000);

    return () => {
      clearTimeout(clickLimitter);
    }
  }, [clickEnabled, remainingTime]);

  useEffect(() => {
    if (!clickEnabled && remainingTime > 0){
      let timer = setTimeout(() => {
        setRemainingTime((prev) => prev - 1);
      }, 1000);
      return () => clearTimeout(timer);
    }
  }, [clickEnabled, remainingTime]);

  const handleTextPropmtChange = (e:React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<any>) => {
    setUserText(e.target.value);
    setIsValidationError(false);
  }

  const handleGenerate = async () => {
    if (clickEnabled && userText.trim().length > 0){
      setClickEnabled(false);
      setRemainingTime(20);
      setLoading(true);
      const res = await openai.createImage({
        prompt: userText,
        n:1,
        size:"1024x1024",
      });
      const data = res.data;
      setLoading(false);
      setGeneratedImage(data.data[0].url || 'Image not found');
      setIsValidationError(false);
    } else {
      setIsValidationError(true);
    }
  }

  function handleImageDownload(){
    const url = generatedImage;
    const filename = 'picha.png';
    saveAs(url, filename);
  }

  return (
    <>
      <Head>
        <title>Picha Gen</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className='flex flex-col justify-center items-center bg-slate-800'>
        <h1 className={`text-3xl font-bold text-white mt-40 ${rubik.variable} font-sans`}>Picha Gen</h1>
        <p className={`text-gray-300 mt-2 ${roboto.variable} font-roboto`}>Generate images from text</p>

        <div className='mt-5 w-1/2'>
              <div className="mt-1">
                <textarea
                  id="about"
                  name="about"
                  rows={5}
                  className={`block p-2.5 w-full ${roboto.variable} font-roboto text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500`}
                  placeholder="Enter some text to generate an image"
                  defaultValue={''}
                  onChange={handleTextPropmtChange}
                  required
                />
              </div>
              {isValidationError && userText.trim().length === 0  && (
                <p className={`text-red-500 ${roboto.variable} font-roboto mt-2`}>Please enter some text to generate an image</p>
              )}
            </div>

            <button
              type="submit"
              onClick={handleGenerate}
              disabled={remainingTime > 0}
              className={`inline-flex mt-8 ${roboto.variable} font-roboto justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2`}
            >
                Generate Picha
            </button>
            {!clickEnabled && (
              <div
                className={`${remainingTime === 0 ? 'text-green-500' : 'text-red-500'} ${roboto.variable} font-roboto mt-10}`}
              >
                {remainingTime > 0 ? `Please wait ${remainingTime} seconds before generating a new image` :"You can generate a new image" }
              </div>
            )}

              {loading ? (
                <div className='mt-10 flex justify-center items-center'>
                  <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-indigo-500"></div>
                </div>
              ) : (
                <div className='flex justify-center mt-10 mb-10 border-dashed h-full'>
                <Image
                  priority
                  width={700}
                  height={500}
                  src={generatedImage} 
                  alt='generated image'
                  className='p-3 h-auto object-contain w-2/3 cursor-pointer'
                  onClick={handleImageDownload}
                  />

            </div>
              )}

      </main>
    </>
  )
}
